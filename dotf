#!/usr/bin/env python3


'''
Files and dirs with secrets, stored in an encrypted place:

.bash_aws_lpm
.bash_aws_tfd
.bash_email
.bash_gitconfig
.bash_sysmed
.config/
.my.cnf
.pgpass
.pypirc
.ssh/

Files (and things) needing secrets:

.crontab
.forward
'''

import json
import os
import sys
import argparse
import subprocess



# Directory containing this script
HERE = os.path.abspath(os.path.dirname(__file__))
DOTFILES = HERE
HOME = os.path.expanduser('~')
DRYRUN = []


def source_bashrc_prompt():

    print('You might want to run:')
    print('source ' + os.path.join(HOME, '.bashrc'))


# def source(filename):
    # subprocess.check_call('source ' + filename, shell=True)


def rsync_to_home(src):
    subprocess.check_call(['rsync', '-av'] + DRYRUN + [src, HOME])


def rsync_from_copy_to_home(name):
    '''
    @param name the basename of a file or directory in the dotfiles copy dir.
    '''
    rsync_to_home(os.path.join(DOTFILES, 'copy', name))


def bin():
    rsync_to_home(os.path.join(DOTFILES, 'bin'))


def copy():
    rsync_to_home(DOTFILES + '/copy/')


def link():
    link_dir = os.path.join(DOTFILES, 'link')
    for name in os.listdir(link_dir):
        src = os.path.join(link_dir, name)
        dest = os.path.join(HOME, name)
        if os.path.islink(dest):
            print('Removing existing link: ' + dest)
            os.remove(dest)

        if not os.path.exists(dest):
            print('Linking {} to {}'.format(src, dest))
            subprocess.check_call(['ln', '-s', src, dest])
        else:
            print(dest + ' already exists and is not a link.  Skipping.')

    source_bashrc_prompt()


def secrets():
    # mount encrypted secrets
    subprocess.check_call(['open', HOME + '/Dropbox/secrets.dmg'])
    input('Waiting for secrets.dmg to mount. Press a return to continue. ')

    # install secrets

    # copy dotfiles
    rsync_to_home('/Volumes/secrets/dotfiles/copy/')

    # Unmount encrypted secrets
    # Eject fails if current working directory is /Volumes/secrets,
    # or something else is using /Volumes/secrets.
    # lsof shows what is using the volume.  Useful info if the eject fails.
    print('If ejecting /Volumes/secrets fails, one of the volumes files might still be open.')
    print('The following listing might show which file/dir.')
    subprocess.check_call('lsof | grep secrets', shell=True)
    subprocess.check_call(['diskutil', 'eject', '/Volumes/secrets'], cwd=HOME)

    source_bashrc_prompt()


def vim():
    rsync_from_copy_to_home('.vim')
    vim_installer = os.path.join(HOME, '.vim', 'install.py')
    if os.path.exists(vim_installer):
        subprocess.check_call(vim_installer)


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='action')
    # Configure echo subparser
    subparser = subparsers.add_parser('bin')
    subparser = subparsers.add_parser('copy')
    subparser = subparsers.add_parser('link')
    subparser = subparsers.add_parser('secrets')
    subparser = subparsers.add_parser('vim')
    # invoke a function whose name corresponds to action and
    # whose parameter names correspond with the cli arguments.
    args = parser.parse_args()
    if args.action is None:
        parser.print_help()
    else:
        kws = dict(vars(args))
        del kws['action']
        return globals()[args.action](**kws)



if __name__ == '__main__':
    main()
