#!/usr/bin/env python3


import argparse
import os
import subprocess

HOME = os.path.expanduser('~')


def run(cmd):
    print(cmd)
    return subprocess.check_call(cmd, shell=True)


def rsync(src, dest, compress=False, dry_run=False):
    z = '-z' if compress else ''
    dry = '--dry-run' if dry_run else ''
    run('rsync {z} {dry} -avhP --stats {src} {dest}'.format(
        z=z, dry=dry, src=src, dest=dest))


def backup_remote(dry_run=False):
    '''
    '''
    dirs = [os.path.join(HOME, 'data'), os.path.join(HOME, 'deploy'),
            os.path.join(HOME, 'Dropbox', 'proj'),
            os.path.join(HOME, 'Dropbox', 'work')]
    dest = 'td23@orchestra.med.harvard.edu:/groups/cbi/td23/backup/'
    for src in dirs:
        rsync(src, dest, compress=True, dry_run=dry_run)


def backup_local(dry_run=False):
    for direc in ['Movies', 'Music', 'Pictures', 'data', 'deploy']:
        rsync(os.path.join(HOME, direc), '/Volumes/pietown/', dry_run=dry_run)


def backup_again(dry_run=False):
    rsync('/Volumes/pietown/Pictures', '/Volumes/chama', dry_run=dry_run)


def main():
    parser = argparse.ArgumentParser(description='Backup/Synchronize files.')
    parser.add_argument('what', choices=['local', 'remote', 'again'], 
                        help='Backup data remotely to orchestra, media ' +
                        'locally to "pietown", or backup pietown pictures ' +
                        'again to chama')
    parser.add_argument('--dry-run', action='store_true', help='Simulate ' +
                        'backing up files without actually copying anything')
    args = parser.parse_args()
    globals()['backup_' + args.what](dry_run=args.dry_run)


if __name__ == '__main__':
    main()
